AWSTemplateFormatVersion: 2010-09-09
Description: First tempate to demonstrate Lambda function using Cloudformation

Parameters:
  RegionToDeploy:
    Type: String
    Description: The AWS region where the resource needs to be deployed.
  DeployType:
    Type: String
    Description: Target environment where the code will be deployed e.g 'dev', 'staging', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.


Resources:
  StepFunctionAccessEnableRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/ProjAdminsPermBoundaryv2'
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: "Allow StepFunctions to enable accessing Lambda service"
      Policies:
        - PolicyName: Proj-Policy-inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'cloudformation:*'
                Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: !Sub 'Proj-StepFunctionAccessEnable-${DeployType}'
  
  LambdaServiceAccessEnableRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/ProjAdminsPermBoundaryv2'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: "Allow Lambda service to handle different AWS Services"
      Policies:
        - PolicyName: Proj-Policy-inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:Describe*'
                  - 'lambda:*'
                  - 'sqs:*'
                  - 'dynamodb:*'
                  - 's3:*'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: !Sub 'Proj-LambdaServiceAccessEnableRole-${DeployType}'

  StateMachineParallelClusterEngine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      Role: !GetAtt 'StepFunctionAccessEnableRole.Arn'
      DefinitionString: !Sub |
        {
          "StartAt": "get suitable instance type",
          "States": {
            "get suitable instance type": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_instance_selection",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.EFS.instance_type",
              "TimeoutSeconds": 60,
              "Next": "prepare pcluster config file",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ]
            },
            "prepare pcluster config file": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_pclusterconfig_instantiate",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$",
              "TimeoutSeconds": 60,
              "Next": "invoke pcluster create",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ]
            },
            "invoke pcluster create": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_pcluster_creation",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$.pcluster_create",
              "TimeoutSeconds": 60,
              "Next": "WaitForSomeTime",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ]
            },
            "WaitForSomeTime": {
              "Type": "Wait",
              "InputPath": "$",
              "OutputPath": "$",
              "Seconds": 60,
              "Next": "check pcluster status"
            },
            "WaitForMoreTime": {
              "Type": "Wait",
              "InputPath": "$",
              "OutputPath": "$",
              "Seconds": 120,
              "Next": "invoke pcluster create"
            },
            "check pcluster status": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_pcluster_status",
              "ResultPath": "$.pcluster.status",
              "TimeoutSeconds": 300,
              "Next": "is pcluster ready",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ]
            },
            "is pcluster ready": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.pcluster.status",
                  "StringEquals": "CREATE_IN_PROGRESS",
                  "Next": "Power nap of 300 secs"
                },
                {
                  "Variable": "$.pcluster.status",
                  "StringEquals": "NOT_FOUND",
                  "Next": "WaitForMoreTime"
                },
                {
                  "Variable": "$.pcluster.status",
                  "StringEquals": "ROLLBACK_COMPLETE",
                  "Next": "log the details into db"
                },
                {
                  "Variable": "$.pcluster.status",
                  "StringEquals": "ROLLBACK_IN_PROGRESS",
                  "Next": "log the details into db"
                },
                {
                  "Variable": "$.pcluster.status",
                  "StringEquals": "CREATE_COMPLETE",
                  "Next": "pcluster created"
                }
              ]
            },
            "Power nap of 300 secs": {
              "Type": "Wait",
              "InputPath": "$",
              "OutputPath": "$",
              "Seconds": 300,
              "Next": "check pcluster status"
            },
            "pcluster created": {
              "Type": "Pass",
              "Next": "get pcluster master instance details"
            },
            "get pcluster master instance details": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_pclustermaster_details",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$",
              "TimeoutSeconds": 60,
              "Next": "log the details into db",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ]
            },
            "log the details into db": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:078794018778:function:v1_pcluster_register",
              "InputPath": "$",
              "OutputPath": "$",
              "ResultPath": "$",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.TooManyRequestsException",
                    "Lambda.SdkClientException",
                    "States.DataLimitExceeded"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 10,
                  "BackoffRate": 3
                }
              ],
              "TimeoutSeconds": 60,
              "End": true
            }
          }
        }      
          
  StateMachineScheduler:
    Type: 'AWS::StepFunctions::StateMachine' 
    Properties:
      Role: !GetAtt 'StepFunctionAccessEnableRole.Arn'
      DefinitionString: !Sub |
        {
          "Comment": "AWS Step Functions Example",
          "StartAt": "scheduling",
          "States": {
          "scheduling": {
            "Type": "Task",
            "Resource": "${LambdaFunctionJobScheduler.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "push workload into pcluster",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.Unknown",
                  "Lambda.ServiceException",
                  "Lambda.TooManyRequestsException",
                  "ProvisionedThroughputExceededException",
                  "States.DataLimitExceeded"
                ],
                "IntervalSeconds": 10,
                "MaxAttempts": 10,
                "BackoffRate": 3
              }
            ]
          },
          "push workload into pcluster": {
            "Type": "Task",
            "Resource": "${LambdaFunctionPushWorkload.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "give permissions",
              "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.Unknown",
                  "Lambda.TooManyRequestsException",
                  "States.DataLimitExceeded"
                ],
                "IntervalSeconds": 10,
                "MaxAttempts": 10,
                "BackoffRate": 3
              }
              ]
          },
          "give permissions": 
          {
            "Type": "Task",
            "Resource": "${LambdaFunctionWorkloadCHMOD.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "start workload launcher script ",
            "Retry": [
            {
              "ErrorEquals": [
                "Lambda.Unknown",
                "Lambda.TooManyRequestsException",
                "States.DataLimitExceeded"
              ],
              "IntervalSeconds": 10,
              "MaxAttempts": 10,
              "BackoffRate": 3
            }
            ]
          },
          "start workload launcher script ": 
          {
            "Type": "Task",
            "Resource": "${LambdaFunctionWorkloadCHMOD.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "End": true,
            "Retry": [
            {
              "ErrorEquals": [
                "Lambda.Unknown",
                "Lambda.TooManyRequestsException",
                "States.DataLimitExceeded"
              ],
              "IntervalSeconds": 10,
              "MaxAttempts": 10,
              "BackoffRate": 3
            }
            ]
          }
        }
  
  LambdaFunctionJobScheduler:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'This Lambda function is responsible for scheduling of Jobs'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionJobScheduler.py'
      MemorySize: 128
      Timeout: 120
      Role: !GetAtt LambdaServiceAccessEnableRole.Arn
      Environment:
        Variables:
          ENV_CLUSTER_TABLE_NAME: hsmc_clusters
          ENV_JOB_STATUS_TABLE_NAME: hsmc_job_status
      ReservedConcurrentExecutions: 1
      FunctionName: !Sub 'LambdaFunctionJobScheduler-${DeployType}'
  
  
  LambdaFunctionPushWorkload:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionPushWorkload.py'
      Description: 'Lambda function to push workload into Parallel Cluster Master.  Uses SSM'
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt LambdaServiceAccessEnableRole.Arn
      FunctionName: !Sub 'LambdaFunctionPushWorkload-${DeployType}'


  LambdaFunctionWorkloadCHMOD:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionWorkloadCHMOD.py'
      Description: 'Lambda Function to run chmod on the workload.tgz which is present in Parallel Cluster Master. Uses SSM'
      MemorySize: 128
      Timeout: 120
      Role: !GetAtt LambdaServiceAccessEnableRole.Arn
      FunctionName: !Sub 'LambdaFunctionWorkloadCHMOD-${DeployType}'


  LambdaFunctionWorkloadLauncher:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: 'Lambda Function to invoke Launcher Script in Parallel Cluster Master. Uses SSM'
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt LambdaServiceAccessEnableRole.Arn
      FunctionName: !Sub 'LambdaFunctionWorkloadLauncher-${DeployType}'