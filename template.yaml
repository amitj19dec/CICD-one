AWSTemplateFormatVersion: 2010-09-09
Description: First tempate to demonstrate Lambda function using Cloudformation

Parameters:
  LambdaExecutionRoleName:
    Description: "IAM role name to be used by Lambda"
    Type: String 

Resources:
  StateMachineScheduler:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "AWS Step Functions Example",
          "StartAt": "scheduling",
          "States": {
          "scheduling": {
            "Type": "Task",
            "Resource": "${LambdaFunctionJobScheduler.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "push workload into pcluster",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.Unknown",
                  "Lambda.ServiceException",
                  "Lambda.TooManyRequestsException",
                  "ProvisionedThroughputExceededException",
                  "States.DataLimitExceeded"
                ],
                "IntervalSeconds": 10,
                "MaxAttempts": 10,
                "BackoffRate": 3
              }
            ]
          },
          "push workload into pcluster": {
            "Type": "Task",
            "Resource": "${LambdaFunctionPushWorkload.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "give permissions",
              "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.Unknown",
                  "Lambda.TooManyRequestsException",
                  "States.DataLimitExceeded"
                ],
                "IntervalSeconds": 10,
                "MaxAttempts": 10,
                "BackoffRate": 3
              }
              ]
          },
          "give permissions": 
          {
            "Type": "Task",
            "Resource": "${LambdaFunctionWorkloadCHMOD.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "Next": "start workload launcher script ",
            "Retry": [
            {
              "ErrorEquals": [
                "Lambda.Unknown",
                "Lambda.TooManyRequestsException",
                "States.DataLimitExceeded"
              ],
              "IntervalSeconds": 10,
              "MaxAttempts": 10,
              "BackoffRate": 3
            }
            ]
          },
          "start workload launcher script ": 
          {
            "Type": "Task",
            "Resource": "${LambdaFunctionWorkloadCHMOD.Arn}",
            "InputPath": "$",
            "OutputPath": "$",
            "ResultPath": "$",
            "TimeoutSeconds": 60,
            "End": true,
            "Retry": [
            {
              "ErrorEquals": [
                "Lambda.Unknown",
                "Lambda.TooManyRequestsException",
                "States.DataLimitExceeded"
              ],
              "IntervalSeconds": 10,
              "MaxAttempts": 10,
              "BackoffRate": 3
            }
            ]
          }
        }
      Role: !Ref LambdaExecutionRoleName
  LambdaFunctionJobScheduler:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'This Lambda function is responsible for scheduling of Jobs'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionJobScheduler.py'
      MemorySize: 128
      Timeout: 120
      Role: !Ref LambdaExecutionRoleName
      Environment:
        Variables:
          ENV_CLUSTER_TABLE_NAME: hsmc_clusters
          ENV_JOB_STATUS_TABLE_NAME: hsmc_job_status
      ReservedConcurrentExecutions: 1
  LambdaFunctionPushWorkload:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionPushWorkload.py'
      Description: 'Lambda function to push workload into Parallel Cluster Master.  Uses SSM'
      MemorySize: 128
      Timeout: 60
      Role: !Ref LambdaExecutionRoleName
  
  LambdaFunctionWorkloadCHMOD:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: 'src/lambda/sfn-job-scheduling/LambdaFunctionWorkloadCHMOD.py'
      Description: 'Lambda Function to run chmod on the workload.tgz which is present in Parallel Cluster Master. Uses SSM'
      MemorySize: 128
      Timeout: 120
      Role: !Ref LambdaExecutionRoleName
  
  LambdaFunctionWorkloadLauncher:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: 'Lambda Function to invoke Launcher Script in Parallel Cluster Master. Uses SSM'
      MemorySize: 128
      Timeout: 60
      Role: !Ref LambdaExecutionRoleName